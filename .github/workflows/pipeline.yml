name: Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ap-southeast-2
  ECR_REPO_NAME: junio-test

jobs:
  initialise:
    name: Initialise
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.versioning.outputs.image_tag }}
    steps:
      - name: Setup image version
        id: versioning
        run: |
          IMAGE_TAG=$(date +'%Y.%m.%d').${GITHUB_RUN_NUMBER}
          echo "::set-output name=image_tag::$(eval printf "%s" "$IMAGE_TAG")"

  build-and-deploy-lambda-image:
    name: Build and deploy Lambda image
    runs-on: ubuntu-latest
    needs: initialise
    env:
      IMAGE_TAG: ${{ needs.initialise.outputs.image_tag }}
    steps:
      - name: Checkout repo
        id: checkout
        uses: actions/checkout@v3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: |
          docker build -t $ECR_REPO_NAME:$IMAGE_TAG -f $GITHUB_WORKSPACE/Api/Dockerfile .

      - name: Create ECR repo
        run: |
          aws ecr create-repository --repository-name $ECR_REPO_NAME --region ap-southeast-2 || true

      - name: Tag and push Docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker tag $ECR_REPO_NAME:$IMAGE_TAG $REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG
          docker tag $ECR_REPO_NAME:$IMAGE_TAG $REGISTRY/$ECR_REPO_NAME:latest
          docker push $REGISTRY/$ECR_REPO_NAME --all-tags

  upgrade-lambda:
    name: Upgrade Lambda
    runs-on: ubuntu-latest
    needs:
      - initialise
      - build-and-deploy-lambda-image
    env:
      IMAGE_TAG: ${{ needs.initialise.outputs.image_tag }}
    steps:
      - name: Checkout repo
        id: checkout
        uses: actions/checkout@v3

      - name: Install and run CDK
        run: |
          npm i -g aws-cdk
          cd Infra/
          cdk deploy --require-approval never -c ecrRepoName=$ECR_REPO_NAME -c lambdaFunctionImageTag=$IMAGE_TAG
